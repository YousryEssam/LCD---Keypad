
AVRASM ver. 2.1.30  D:\4 CS\Embedded Systems\Second Project\Code\Debug\List\LCD & Keypad Code.asm Thu Dec 21 16:20:59 2023

D:\4 CS\Embedded Systems\Second Project\Code\Debug\List\LCD & Keypad Code.asm(1418): warning: Register r5 already defined by the .DEF directive
D:\4 CS\Embedded Systems\Second Project\Code\Debug\List\LCD & Keypad Code.asm(1419): warning: Register r4 already defined by the .DEF directive
D:\4 CS\Embedded Systems\Second Project\Code\Debug\List\LCD & Keypad Code.asm(1420): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V4.00a Evaluation
                 ;(C) Copyright 1998-2023 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPMCSR=0x37
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x40
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003a 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 6325
D:\4 CS\Embedded Systems\Second Project\Code\Debug\List\LCD & Keypad Code.asm(1458): warning: .cseg .db misalignment - padding zero byte
000034 0000      	.DB  0x25,0x63,0x0
                 _0x2000003:
000035 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000036 0002      	.DW  0x02
000037 0160      	.DW  __base_y_G100
000038 006a      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000039 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003a 94f8      	CLI
                 
00003b 27ee      	CLR  R30
00003c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003d e0f1      	LDI  R31,1
00003e bffb      	OUT  GICR,R31
00003f bfeb      	OUT  GICR,R30
000040 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000041 e08d      	LDI  R24,(14-2)+1
000042 e0a2      	LDI  R26,2
000043 27bb      	CLR  R27
                 __CLEAR_REG:
000044 93ed      	ST   X+,R30
000045 958a      	DEC  R24
000046 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000047 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000048 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000049 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004a 93ed      	ST   X+,R30
00004b 9701      	SBIW R24,1
00004c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004d e6ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004e e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00004f 9185      	LPM  R24,Z+
000050 9195      	LPM  R25,Z+
000051 9700      	SBIW R24,0
000052 f061      	BREQ __GLOBAL_INI_END
000053 91a5      	LPM  R26,Z+
000054 91b5      	LPM  R27,Z+
000055 9005      	LPM  R0,Z+
000056 9015      	LPM  R1,Z+
000057 01bf      	MOVW R22,R30
000058 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000059 9005      	LPM  R0,Z+
00005a 920d      	ST   X+,R0
00005b 9701      	SBIW R24,1
00005c f7e1      	BRNE __GLOBAL_INI_LOOP
00005d 01fb      	MOVW R30,R22
00005e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00005f e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000060 bfed      	OUT  SPL,R30
000061 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000062 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000063 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000064 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000065 940c 0067 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;char keyPad();
                 ;void LCD_KEYPAD_START();
                 ;void main(void)
                 ; 0000 000E {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 000F int liters = 0 ;
                 ; 0000 0010 char num ;
                 ; 0000 0011 LCD_KEYPAD_START();
                 ;	liters -> R16,R17
                 ;	num -> R19
                +
000067 e000     +LDI R16 , LOW ( 0 )
000068 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000069 d01a      	RCALL _LCD_KEYPAD_START
                 ; 0000 0012 while (1)
                 _0x3:
                 ; 0000 0013 {
                 ; 0000 0014 num = keyPad()  ;
00006a d020      	RCALL _keyPad
00006b 2f3e      	MOV  R19,R30
                 ; 0000 0015 if(liters == 32){
00006c e2e0      	LDI  R30,LOW(32)
00006d e0f0      	LDI  R31,HIGH(32)
00006e 17e0      	CP   R30,R16
00006f 07f1      	CPC  R31,R17
000070 f419      	BRNE _0x6
                 ; 0000 0016 liters = 0 ;
                +
000071 e000     +LDI R16 , LOW ( 0 )
000072 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0000 0017 lcd_clear();
000073 d0a9      	RCALL _lcd_clear
                 ; 0000 0018 }
                 ; 0000 0019 lcd_printf("%c" , num);
                 _0x6:
                +
000074 e6e6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000075 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000076 93fa      	ST   -Y,R31
000077 93ea      	ST   -Y,R30
000078 2fe3      	MOV  R30,R19
000079 27ff      	CLR  R31
00007a 2766      	CLR  R22
00007b 2777      	CLR  R23
00007c d29c      	RCALL __PUTPARD1
00007d e084      	LDI  R24,4
00007e d21c      	RCALL _lcd_printf
00007f 9626      	ADIW R28,6
                 ; 0000 001A liters = liters + 1 ;
                +
000080 5f0f     +SUBI R16 , LOW ( - 1 )
000081 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 001B }
000082 cfe7      	RJMP _0x3
                 ; 0000 001C }
                 _0x7:
000083 cfff      	RJMP _0x7
                 ; .FEND
                 ;void LCD_KEYPAD_START(){
                 ; 0000 001E void LCD_KEYPAD_START(){
                 _LCD_KEYPAD_START:
                 ; .FSTART _LCD_KEYPAD_START
                 ; 0000 001F // Set KeyPad port ;
                 ; 0000 0020 DDRB  = 0b00000111;
000084 e0e7      	LDI  R30,LOW(7)
000085 bbe7      	OUT  0x17,R30
                 ; 0000 0021 PORTB = 0b11111000;
000086 efe8      	LDI  R30,LOW(248)
000087 bbe8      	OUT  0x18,R30
                 ; 0000 0022 // Initiate LCD
                 ; 0000 0023 lcd_init(16);
000088 e1a0      	LDI  R26,LOW(16)
000089 d0b0      	RCALL _lcd_init
                 ; 0000 0024 }
00008a 9508      	RET
                 ; .FEND
                 ;char keyPad(){
                 ; 0000 0025 char keyPad(){
                 _keyPad:
                 ; .FSTART _keyPad
                 ; 0000 0026 while(1){
                 _0x8:
                 ; 0000 0027 // C1
                 ; 0000 0028 PORTB.0 = 0; PORTB.1 = 1; PORTB.2 = 1;
00008b 98c0      	CBI  0x18,0
00008c 9ac1      	SBI  0x18,1
00008d 9ac2      	SBI  0x18,2
                 ; 0000 0029 //Only C1 is activated
                 ; 0000 002A switch(PINB){
00008e b3e6      	IN   R30,0x16
                 ; 0000 002B case 0b11110110:
00008f 3fe6      	CPI  R30,LOW(0xF6)
000090 f429      	BRNE _0x14
                 ; 0000 002C while (PINB.3 == 0);
                 _0x15:
000091 9bb3      	SBIS 0x16,3
000092 cffe      	RJMP _0x15
                 ; 0000 002D return '1';
000093 e3e1      	LDI  R30,LOW(49)
000094 9508      	RET
                 ; 0000 002E break;
000095 c014      	RJMP _0x13
                 ; 0000 002F 
                 ; 0000 0030 case 0b11101110:
                 _0x14:
000096 3eee      	CPI  R30,LOW(0xEE)
000097 f429      	BRNE _0x18
                 ; 0000 0031 while (PINB.4 == 0);
                 _0x19:
000098 9bb4      	SBIS 0x16,4
000099 cffe      	RJMP _0x19
                 ; 0000 0032 return '4';
00009a e3e4      	LDI  R30,LOW(52)
00009b 9508      	RET
                 ; 0000 0033 break;
00009c c00d      	RJMP _0x13
                 ; 0000 0034 
                 ; 0000 0035 case 0b11011110:
                 _0x18:
00009d 3dee      	CPI  R30,LOW(0xDE)
00009e f429      	BRNE _0x1C
                 ; 0000 0036 while (PINB.5 == 0);
                 _0x1D:
00009f 9bb5      	SBIS 0x16,5
0000a0 cffe      	RJMP _0x1D
                 ; 0000 0037 return '7';
0000a1 e3e7      	LDI  R30,LOW(55)
0000a2 9508      	RET
                 ; 0000 0038 break;
0000a3 c006      	RJMP _0x13
                 ; 0000 0039 
                 ; 0000 003A case 0b10111110:
                 _0x1C:
0000a4 3bee      	CPI  R30,LOW(0xBE)
0000a5 f421      	BRNE _0x13
                 ; 0000 003B while (PINB.6 == 0);
                 _0x21:
0000a6 9bb6      	SBIS 0x16,6
0000a7 cffe      	RJMP _0x21
                 ; 0000 003C return '*';
0000a8 e2ea      	LDI  R30,LOW(42)
0000a9 9508      	RET
                 ; 0000 003D break;
                 ; 0000 003E 
                 ; 0000 003F }
                 _0x13:
                 ; 0000 0040 
                 ; 0000 0041 // C2
                 ; 0000 0042 PORTB.0 = 1; PORTB.1 = 0; PORTB.2 = 1;
0000aa 9ac0      	SBI  0x18,0
0000ab 98c1      	CBI  0x18,1
0000ac 9ac2      	SBI  0x18,2
                 ; 0000 0043 //Only C2 is activated
                 ; 0000 0044 switch(PINB){
0000ad b3e6      	IN   R30,0x16
                 ; 0000 0045 case 0b11110101:
0000ae 3fe5      	CPI  R30,LOW(0xF5)
0000af f429      	BRNE _0x2D
                 ; 0000 0046 while (PINB.3 == 0);
                 _0x2E:
0000b0 9bb3      	SBIS 0x16,3
0000b1 cffe      	RJMP _0x2E
                 ; 0000 0047 return '2';
0000b2 e3e2      	LDI  R30,LOW(50)
0000b3 9508      	RET
                 ; 0000 0048 break;
0000b4 c014      	RJMP _0x2C
                 ; 0000 0049 
                 ; 0000 004A case 0b11101101:
                 _0x2D:
0000b5 3eed      	CPI  R30,LOW(0xED)
0000b6 f429      	BRNE _0x31
                 ; 0000 004B while (PINB.4 == 0);
                 _0x32:
0000b7 9bb4      	SBIS 0x16,4
0000b8 cffe      	RJMP _0x32
                 ; 0000 004C return '5';
0000b9 e3e5      	LDI  R30,LOW(53)
0000ba 9508      	RET
                 ; 0000 004D break;
0000bb c00d      	RJMP _0x2C
                 ; 0000 004E 
                 ; 0000 004F case 0b11011101:
                 _0x31:
0000bc 3ded      	CPI  R30,LOW(0xDD)
0000bd f429      	BRNE _0x35
                 ; 0000 0050 while (PINB.5 == 0);
                 _0x36:
0000be 9bb5      	SBIS 0x16,5
0000bf cffe      	RJMP _0x36
                 ; 0000 0051 return '8';
0000c0 e3e8      	LDI  R30,LOW(56)
0000c1 9508      	RET
                 ; 0000 0052 break;
0000c2 c006      	RJMP _0x2C
                 ; 0000 0053 
                 ; 0000 0054 case 0b10111101:
                 _0x35:
0000c3 3bed      	CPI  R30,LOW(0xBD)
0000c4 f421      	BRNE _0x2C
                 ; 0000 0055 while (PINB.6 == 0);
                 _0x3A:
0000c5 9bb6      	SBIS 0x16,6
0000c6 cffe      	RJMP _0x3A
                 ; 0000 0056 return '0';
0000c7 e3e0      	LDI  R30,LOW(48)
0000c8 9508      	RET
                 ; 0000 0057 break;
                 ; 0000 0058 }
                 _0x2C:
                 ; 0000 0059 
                 ; 0000 005A // C3
                 ; 0000 005B PORTB.0 = 1; PORTB.1 = 1; PORTB.2 = 0;
0000c9 9ac0      	SBI  0x18,0
0000ca 9ac1      	SBI  0x18,1
0000cb 98c2      	CBI  0x18,2
                 ; 0000 005C //Only C3 is activated
                 ; 0000 005D switch(PINB){
0000cc b3e6      	IN   R30,0x16
                 ; 0000 005E 
                 ; 0000 005F case 0b11110011:
0000cd 3fe3      	CPI  R30,LOW(0xF3)
0000ce f429      	BRNE _0x46
                 ; 0000 0060 while (PINB.3 == 0);
                 _0x47:
0000cf 9bb3      	SBIS 0x16,3
0000d0 cffe      	RJMP _0x47
                 ; 0000 0061 return '3';
0000d1 e3e3      	LDI  R30,LOW(51)
0000d2 9508      	RET
                 ; 0000 0062 break;
0000d3 c014      	RJMP _0x45
                 ; 0000 0063 
                 ; 0000 0064 case 0b11101011:
                 _0x46:
0000d4 3eeb      	CPI  R30,LOW(0xEB)
0000d5 f429      	BRNE _0x4A
                 ; 0000 0065 while (PINB.4 == 0);
                 _0x4B:
0000d6 9bb4      	SBIS 0x16,4
0000d7 cffe      	RJMP _0x4B
                 ; 0000 0066 return '6';
0000d8 e3e6      	LDI  R30,LOW(54)
0000d9 9508      	RET
                 ; 0000 0067 break;
0000da c00d      	RJMP _0x45
                 ; 0000 0068 
                 ; 0000 0069 case 0b11011011:
                 _0x4A:
0000db 3deb      	CPI  R30,LOW(0xDB)
0000dc f429      	BRNE _0x4E
                 ; 0000 006A while (PINB.5 == 0);
                 _0x4F:
0000dd 9bb5      	SBIS 0x16,5
0000de cffe      	RJMP _0x4F
                 ; 0000 006B return '9';
0000df e3e9      	LDI  R30,LOW(57)
0000e0 9508      	RET
                 ; 0000 006C break;
0000e1 c006      	RJMP _0x45
                 ; 0000 006D 
                 ; 0000 006E case 0b10111011:
                 _0x4E:
0000e2 3beb      	CPI  R30,LOW(0xBB)
0000e3 f421      	BRNE _0x45
                 ; 0000 006F while (PINB.6 == 0);
                 _0x53:
0000e4 9bb6      	SBIS 0x16,6
0000e5 cffe      	RJMP _0x53
                 ; 0000 0070 return '#';
0000e6 e2e3      	LDI  R30,LOW(35)
0000e7 9508      	RET
                 ; 0000 0071 break;
                 ; 0000 0072 
                 ; 0000 0073 }
                 _0x45:
                 ; 0000 0074 
                 ; 0000 0075 }
0000e8 cfa2      	RJMP _0x8
                 ; 0000 0076 }
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000e9 931a      	ST   -Y,R17
0000ea 2f1a      	MOV  R17,R26
0000eb b3eb      	IN   R30,0x1B
0000ec 70ef      	ANDI R30,LOW(0xF)
0000ed 2fae      	MOV  R26,R30
0000ee 2fe1      	MOV  R30,R17
0000ef 7fe0      	ANDI R30,LOW(0xF0)
0000f0 2bea      	OR   R30,R26
0000f1 bbeb      	OUT  0x1B,R30
                +
0000f2 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000f3 958a     +DEC R24
0000f4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000f5 9ada      	SBI  0x1B,2
                +
0000f6 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000f7 958a     +DEC R24
0000f8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000f9 98da      	CBI  0x1B,2
                +
0000fa e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000fb 958a     +DEC R24
0000fc f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000fd c065      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0000fe 93aa      	ST   -Y,R26
0000ff 81a8      	LD   R26,Y
000100 dfe8      	RCALL __lcd_write_nibble_G100
000101 81e8          ld    r30,y
000102 95e2          swap  r30
000103 83e8          st    y,r30
000104 81a8      	LD   R26,Y
000105 dfe3      	RCALL __lcd_write_nibble_G100
                +
000106 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000107 958a     +DEC R24
000108 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000109 9621      	ADIW R28,1
00010a 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00010b 931a      	ST   -Y,R17
00010c 930a      	ST   -Y,R16
00010d 2f1a      	MOV  R17,R26
00010e 810a      	LDD  R16,Y+2
00010f 2fe1      	MOV  R30,R17
000110 e0f0      	LDI  R31,0
000111 5ae0      	SUBI R30,LOW(-__base_y_G100)
000112 4ffe      	SBCI R31,HIGH(-__base_y_G100)
000113 81e0      	LD   R30,Z
000114 0fe0      	ADD  R30,R16
000115 2fae      	MOV  R26,R30
000116 dfe7      	RCALL __lcd_write_data
000117 2e50      	MOV  R5,R16
000118 2e41      	MOV  R4,R17
000119 8119      	LDD  R17,Y+1
00011a 8108      	LDD  R16,Y+0
00011b 9623      	ADIW R28,3
00011c 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00011d e0a2      	LDI  R26,LOW(2)
00011e d1bc      	RCALL SUBOPT_0x0
00011f e0ac      	LDI  R26,LOW(12)
000120 dfdd      	RCALL __lcd_write_data
000121 e0a1      	LDI  R26,LOW(1)
000122 d1b8      	RCALL SUBOPT_0x0
000123 e0e0      	LDI  R30,LOW(0)
000124 2e4e      	MOV  R4,R30
000125 2e5e      	MOV  R5,R30
000126 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000127 931a      	ST   -Y,R17
000128 2f1a      	MOV  R17,R26
000129 301a      	CPI  R17,10
00012a f011      	BREQ _0x2000005
00012b 1457      	CP   R5,R7
00012c f038      	BRLO _0x2000004
                 _0x2000005:
00012d e0e0      	LDI  R30,LOW(0)
00012e 93ea      	ST   -Y,R30
00012f 9443      	INC  R4
000130 2da4      	MOV  R26,R4
000131 dfd9      	RCALL _lcd_gotoxy
000132 301a      	CPI  R17,10
000133 f179      	BREQ _0x2080001
                 _0x2000004:
000134 9453      	INC  R5
000135 9ad8      	SBI  0x1B,0
000136 2fa1      	MOV  R26,R17
000137 dfc6      	RCALL __lcd_write_data
000138 98d8      	CBI  0x1B,0
000139 c029      	RJMP _0x2080001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00013a 931a      	ST   -Y,R17
00013b 2f1a      	MOV  R17,R26
00013c b3ea      	IN   R30,0x1A
00013d 6fe0      	ORI  R30,LOW(0xF0)
00013e bbea      	OUT  0x1A,R30
00013f 9ad2      	SBI  0x1A,2
000140 9ad0      	SBI  0x1A,0
000141 9ad1      	SBI  0x1A,1
000142 98da      	CBI  0x1B,2
000143 98d8      	CBI  0x1B,0
000144 98d9      	CBI  0x1B,1
000145 2e71      	MOV  R7,R17
000146 2fe1      	MOV  R30,R17
000147 58e0      	SUBI R30,-LOW(128)
                +
000148 93e0 0162+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00014a 2fe1      	MOV  R30,R17
00014b 54e0      	SUBI R30,-LOW(192)
                +
00014c 93e0 0163+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00014e e1a4      	LDI  R26,LOW(20)
00014f e0b0      	LDI  R27,0
000150 d1cd      	RCALL _delay_ms
000151 d18d      	RCALL SUBOPT_0x1
000152 d18c      	RCALL SUBOPT_0x1
000153 d18b      	RCALL SUBOPT_0x1
000154 e2a0      	LDI  R26,LOW(32)
000155 df93      	RCALL __lcd_write_nibble_G100
                +
000156 ec88     +LDI R24 , LOW ( 200 )
000157 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000158 9701     +SBIW R24 , 1
000159 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00015a e2a8      	LDI  R26,LOW(40)
00015b dfa2      	RCALL __lcd_write_data
00015c e0a4      	LDI  R26,LOW(4)
00015d dfa0      	RCALL __lcd_write_data
00015e e8a5      	LDI  R26,LOW(133)
00015f df9e      	RCALL __lcd_write_data
000160 e0a6      	LDI  R26,LOW(6)
000161 df9c      	RCALL __lcd_write_data
000162 dfba      	RCALL _lcd_clear
                 _0x2080001:
000163 9119      	LD   R17,Y+
000164 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 __print_G101:
                 ; .FSTART __print_G101
000165 93ba      	ST   -Y,R27
000166 93aa      	ST   -Y,R26
000167 9726      	SBIW R28,6
000168 d19a      	RCALL __SAVELOCR6
000169 e010      	LDI  R17,0
00016a 85ac      	LDD  R26,Y+12
00016b 85bd      	LDD  R27,Y+12+1
00016c e0e0      	LDI  R30,LOW(0)
00016d e0f0      	LDI  R31,HIGH(0)
00016e 93ed      	ST   X+,R30
00016f 93fc      	ST   X,R31
                 _0x2020016:
000170 89ea      	LDD  R30,Y+18
000171 89fb      	LDD  R31,Y+18+1
000172 9631      	ADIW R30,1
000173 8bea      	STD  Y+18,R30
000174 8bfb      	STD  Y+18+1,R31
000175 9731      	SBIW R30,1
000176 91e4      	LPM  R30,Z
000177 2f2e      	MOV  R18,R30
000178 30e0      	CPI  R30,0
000179 f409      	BRNE PC+2
00017a c10b      	RJMP _0x2020018
00017b 2fe1      	MOV  R30,R17
00017c 30e0      	CPI  R30,0
00017d f431      	BRNE _0x202001C
00017e 3225      	CPI  R18,37
00017f f411      	BRNE _0x202001D
000180 e011      	LDI  R17,LOW(1)
000181 c001      	RJMP _0x202001E
                 _0x202001D:
000182 d163      	RCALL SUBOPT_0x2
                 _0x202001E:
000183 c101      	RJMP _0x202001B
                 _0x202001C:
000184 30e1      	CPI  R30,LOW(0x1)
000185 f4a1      	BRNE _0x202001F
000186 3225      	CPI  R18,37
000187 f411      	BRNE _0x2020020
000188 d15d      	RCALL SUBOPT_0x2
000189 c0fa      	RJMP _0x20200CC
                 _0x2020020:
00018a e012      	LDI  R17,LOW(2)
00018b e040      	LDI  R20,LOW(0)
00018c e000      	LDI  R16,LOW(0)
00018d 322d      	CPI  R18,45
00018e f411      	BRNE _0x2020021
00018f e001      	LDI  R16,LOW(1)
000190 c0f4      	RJMP _0x202001B
                 _0x2020021:
000191 322b      	CPI  R18,43
000192 f411      	BRNE _0x2020022
000193 e24b      	LDI  R20,LOW(43)
000194 c0f0      	RJMP _0x202001B
                 _0x2020022:
000195 3220      	CPI  R18,32
000196 f411      	BRNE _0x2020023
000197 e240      	LDI  R20,LOW(32)
000198 c0ec      	RJMP _0x202001B
                 _0x2020023:
000199 c002      	RJMP _0x2020024
                 _0x202001F:
00019a 30e2      	CPI  R30,LOW(0x2)
00019b f439      	BRNE _0x2020025
                 _0x2020024:
00019c e050      	LDI  R21,LOW(0)
00019d e013      	LDI  R17,LOW(3)
00019e 3320      	CPI  R18,48
00019f f411      	BRNE _0x2020026
0001a0 6800      	ORI  R16,LOW(128)
0001a1 c0e3      	RJMP _0x202001B
                 _0x2020026:
0001a2 c003      	RJMP _0x2020027
                 _0x2020025:
0001a3 30e3      	CPI  R30,LOW(0x3)
0001a4 f009      	BREQ PC+2
0001a5 c0df      	RJMP _0x202001B
                 _0x2020027:
0001a6 3320      	CPI  R18,48
0001a7 f010      	BRLO _0x202002A
0001a8 332a      	CPI  R18,58
0001a9 f008      	BRLO _0x202002B
                 _0x202002A:
0001aa c007      	RJMP _0x2020029
                 _0x202002B:
0001ab e0aa      	LDI  R26,LOW(10)
0001ac 9f5a      	MUL  R21,R26
0001ad 2d50      	MOV  R21,R0
0001ae 2fe2      	MOV  R30,R18
0001af 53e0      	SUBI R30,LOW(48)
0001b0 0f5e      	ADD  R21,R30
0001b1 c0d3      	RJMP _0x202001B
                 _0x2020029:
0001b2 2fe2      	MOV  R30,R18
0001b3 36e3      	CPI  R30,LOW(0x63)
0001b4 f439      	BRNE _0x202002F
0001b5 d137      	RCALL SUBOPT_0x3
0001b6 89e8      	LDD  R30,Y+16
0001b7 89f9      	LDD  R31,Y+16+1
0001b8 81a4      	LDD  R26,Z+4
0001b9 93aa      	ST   -Y,R26
0001ba d138      	RCALL SUBOPT_0x4
0001bb c0c8      	RJMP _0x2020030
                 _0x202002F:
0001bc 37e3      	CPI  R30,LOW(0x73)
0001bd f429      	BRNE _0x2020032
0001be d12e      	RCALL SUBOPT_0x3
0001bf d139      	RCALL SUBOPT_0x5
0001c0 d101      	RCALL _strlen
0001c1 2f1e      	MOV  R17,R30
0001c2 c007      	RJMP _0x2020033
                 _0x2020032:
0001c3 37e0      	CPI  R30,LOW(0x70)
0001c4 f449      	BRNE _0x2020035
0001c5 d127      	RCALL SUBOPT_0x3
0001c6 d132      	RCALL SUBOPT_0x5
0001c7 d106      	RCALL _strlenf
0001c8 2f1e      	MOV  R17,R30
0001c9 6008      	ORI  R16,LOW(8)
                 _0x2020033:
0001ca 6002      	ORI  R16,LOW(2)
0001cb 770f      	ANDI R16,LOW(127)
0001cc e030      	LDI  R19,LOW(0)
0001cd c03a      	RJMP _0x2020036
                 _0x2020035:
0001ce 36e4      	CPI  R30,LOW(0x64)
0001cf f011      	BREQ _0x2020039
0001d0 36e9      	CPI  R30,LOW(0x69)
0001d1 f411      	BRNE _0x202003A
                 _0x2020039:
0001d2 6004      	ORI  R16,LOW(4)
0001d3 c002      	RJMP _0x202003B
                 _0x202003A:
0001d4 37e5      	CPI  R30,LOW(0x75)
0001d5 f431      	BRNE _0x202003C
                 _0x202003B:
0001d6 e5e4      	LDI  R30,LOW(_tbl10_G101*2)
0001d7 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
0001d8 83ee      	STD  Y+6,R30
0001d9 83ff      	STD  Y+6+1,R31
0001da e015      	LDI  R17,LOW(5)
0001db c00c      	RJMP _0x202003D
                 _0x202003C:
0001dc 35e8      	CPI  R30,LOW(0x58)
0001dd f411      	BRNE _0x202003F
0001de 6008      	ORI  R16,LOW(8)
0001df c003      	RJMP _0x2020040
                 _0x202003F:
0001e0 37e8      	CPI  R30,LOW(0x78)
0001e1 f009      	BREQ PC+2
0001e2 c0a1      	RJMP _0x2020071
                 _0x2020040:
0001e3 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
0001e4 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
0001e5 83ee      	STD  Y+6,R30
0001e6 83ff      	STD  Y+6+1,R31
0001e7 e014      	LDI  R17,LOW(4)
                 _0x202003D:
0001e8 ff02      	SBRS R16,2
0001e9 c015      	RJMP _0x2020042
0001ea d102      	RCALL SUBOPT_0x3
0001eb 89a8      	LDD  R26,Y+16
0001ec 89b9      	LDD  R27,Y+16+1
0001ed 9614      	ADIW R26,4
0001ee 91ed      	LD   R30,X+
0001ef 91fd      	LD   R31,X+
0001f0 87ea      	STD  Y+10,R30
0001f1 87fb      	STD  Y+10+1,R31
0001f2 85ab      	LDD  R26,Y+11
0001f3 23aa      	TST  R26
0001f4 f422      	BRPL _0x2020043
0001f5 d11b      	RCALL __ANEGW1
0001f6 87ea      	STD  Y+10,R30
0001f7 87fb      	STD  Y+10+1,R31
0001f8 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
0001f9 3040      	CPI  R20,0
0001fa f011      	BREQ _0x2020044
0001fb 5f1f      	SUBI R17,-LOW(1)
0001fc c001      	RJMP _0x2020045
                 _0x2020044:
0001fd 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
0001fe c009      	RJMP _0x2020046
                 _0x2020042:
0001ff d0ed      	RCALL SUBOPT_0x3
000200 89a8      	LDD  R26,Y+16
000201 89b9      	LDD  R27,Y+16+1
000202 9614      	ADIW R26,4
                +
000203 91ed     +LD R30 , X +
000204 91fc     +LD R31 , X
000205 9711     +SBIW R26 , 1
                 	__GETW1P
000206 87ea      	STD  Y+10,R30
000207 87fb      	STD  Y+10+1,R31
                 _0x2020046:
                 _0x2020036:
000208 fd00      	SBRC R16,0
000209 c010      	RJMP _0x2020047
                 _0x2020048:
00020a 1715      	CP   R17,R21
00020b f470      	BRSH _0x202004A
00020c ff07      	SBRS R16,7
00020d c008      	RJMP _0x202004B
00020e ff02      	SBRS R16,2
00020f c004      	RJMP _0x202004C
000210 7f0b      	ANDI R16,LOW(251)
000211 2f24      	MOV  R18,R20
000212 5011      	SUBI R17,LOW(1)
000213 c001      	RJMP _0x202004D
                 _0x202004C:
000214 e320      	LDI  R18,LOW(48)
                 _0x202004D:
000215 c001      	RJMP _0x202004E
                 _0x202004B:
000216 e220      	LDI  R18,LOW(32)
                 _0x202004E:
000217 d0ce      	RCALL SUBOPT_0x2
000218 5051      	SUBI R21,LOW(1)
000219 cff0      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
00021a 2f31      	MOV  R19,R17
00021b ff01      	SBRS R16,1
00021c c016      	RJMP _0x202004F
                 _0x2020050:
00021d 3030      	CPI  R19,0
00021e f099      	BREQ _0x2020052
00021f ff03      	SBRS R16,3
000220 c006      	RJMP _0x2020053
000221 81ee      	LDD  R30,Y+6
000222 81ff      	LDD  R31,Y+6+1
000223 9125      	LPM  R18,Z+
000224 83ee      	STD  Y+6,R30
000225 83ff      	STD  Y+6+1,R31
000226 c005      	RJMP _0x2020054
                 _0x2020053:
000227 81ae      	LDD  R26,Y+6
000228 81bf      	LDD  R27,Y+6+1
000229 912d      	LD   R18,X+
00022a 83ae      	STD  Y+6,R26
00022b 83bf      	STD  Y+6+1,R27
                 _0x2020054:
00022c d0b9      	RCALL SUBOPT_0x2
00022d 3050      	CPI  R21,0
00022e f009      	BREQ _0x2020055
00022f 5051      	SUBI R21,LOW(1)
                 _0x2020055:
000230 5031      	SUBI R19,LOW(1)
000231 cfeb      	RJMP _0x2020050
                 _0x2020052:
000232 c048      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
000233 e320      	LDI  R18,LOW(48)
000234 81ee      	LDD  R30,Y+6
000235 81ff      	LDD  R31,Y+6+1
000236 d0de      	RCALL __GETW1PF
000237 87e8      	STD  Y+8,R30
000238 87f9      	STD  Y+8+1,R31
000239 81ee      	LDD  R30,Y+6
00023a 81ff      	LDD  R31,Y+6+1
00023b 9632      	ADIW R30,2
00023c 83ee      	STD  Y+6,R30
00023d 83ff      	STD  Y+6+1,R31
                 _0x202005A:
00023e 85e8      	LDD  R30,Y+8
00023f 85f9      	LDD  R31,Y+8+1
000240 85aa      	LDD  R26,Y+10
000241 85bb      	LDD  R27,Y+10+1
000242 17ae      	CP   R26,R30
000243 07bf      	CPC  R27,R31
000244 f050      	BRLO _0x202005C
000245 5f2f      	SUBI R18,-LOW(1)
000246 85a8      	LDD  R26,Y+8
000247 85b9      	LDD  R27,Y+8+1
000248 85ea      	LDD  R30,Y+10
000249 85fb      	LDD  R31,Y+10+1
00024a 1bea      	SUB  R30,R26
00024b 0bfb      	SBC  R31,R27
00024c 87ea      	STD  Y+10,R30
00024d 87fb      	STD  Y+10+1,R31
00024e cfef      	RJMP _0x202005A
                 _0x202005C:
00024f 332a      	CPI  R18,58
000250 f028      	BRLO _0x202005D
000251 ff03      	SBRS R16,3
000252 c002      	RJMP _0x202005E
000253 5f29      	SUBI R18,-LOW(7)
000254 c001      	RJMP _0x202005F
                 _0x202005E:
000255 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
000256 fd04      	SBRC R16,4
000257 c019      	RJMP _0x2020061
000258 3321      	CPI  R18,49
000259 f420      	BRSH _0x2020063
00025a 85a8      	LDD  R26,Y+8
00025b 85b9      	LDD  R27,Y+8+1
00025c 9711      	SBIW R26,1
00025d f409      	BRNE _0x2020062
                 _0x2020063:
00025e c009      	RJMP _0x20200CD
                 _0x2020062:
00025f 1753      	CP   R21,R19
000260 f010      	BRLO _0x2020067
000261 ff00      	SBRS R16,0
000262 c001      	RJMP _0x2020068
                 _0x2020067:
000263 c011      	RJMP _0x2020066
                 _0x2020068:
000264 e220      	LDI  R18,LOW(32)
000265 ff07      	SBRS R16,7
000266 c00a      	RJMP _0x2020069
000267 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
000268 6100      	ORI  R16,LOW(16)
000269 ff02      	SBRS R16,2
00026a c006      	RJMP _0x202006A
00026b 7f0b      	ANDI R16,LOW(251)
00026c 934a      	ST   -Y,R20
00026d d085      	RCALL SUBOPT_0x4
00026e 3050      	CPI  R21,0
00026f f009      	BREQ _0x202006B
000270 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
000271 d074      	RCALL SUBOPT_0x2
000272 3050      	CPI  R21,0
000273 f009      	BREQ _0x202006C
000274 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
000275 5031      	SUBI R19,LOW(1)
000276 85a8      	LDD  R26,Y+8
000277 85b9      	LDD  R27,Y+8+1
000278 9712      	SBIW R26,2
000279 f008      	BRLO _0x2020059
00027a cfb8      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
00027b ff00      	SBRS R16,0
00027c c007      	RJMP _0x202006D
                 _0x202006E:
00027d 3050      	CPI  R21,0
00027e f029      	BREQ _0x2020070
00027f 5051      	SUBI R21,LOW(1)
000280 e2e0      	LDI  R30,LOW(32)
000281 93ea      	ST   -Y,R30
000282 d070      	RCALL SUBOPT_0x4
000283 cff9      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
000284 e010      	LDI  R17,LOW(0)
                 _0x202001B:
000285 ceea      	RJMP _0x2020016
                 _0x2020018:
000286 85ac      	LDD  R26,Y+12
000287 85bd      	LDD  R27,Y+12+1
000288 91ed      	LD   R30,X+
000289 91fd      	LD   R31,X+
00028a d07f      	RCALL __LOADLOCR6
00028b 9664      	ADIW R28,20
00028c 9508      	RET
                 ; .FEND
                 _put_lcd_G101:
                 ; .FSTART _put_lcd_G101
00028d d077      	RCALL __SAVELOCR4
00028e 018d      	MOVW R16,R26
00028f 813c      	LDD  R19,Y+4
000290 2fa3      	MOV  R26,R19
000291 de95      	RCALL _lcd_putchar
000292 01d8      	MOVW R26,R16
000293 91ed      	LD   R30,X+
000294 91fd      	LD   R31,X+
000295 9631      	ADIW R30,1
000296 93fe      	ST   -X,R31
000297 93ee      	ST   -X,R30
000298 d073      	RCALL __LOADLOCR4
000299 9625      	ADIW R28,5
00029a 9508      	RET
                 ; .FEND
                 _lcd_printf:
                 ; .FSTART _lcd_printf
00029b 92ff      	PUSH R15
00029c 2ef8      	MOV  R15,R24
00029d 9726      	SBIW R28,6
00029e 931a      	ST   -Y,R17
00029f 930a      	ST   -Y,R16
0002a0 01de      	MOVW R26,R28
0002a1 9614      	ADIW R26,4
                +
0002a2 2400     +CLR R0
0002a3 0daf     +ADD R26 , R15
0002a4 1db0     +ADC R27 , R0
                 	__ADDW2R15
0002a5 018d      	MOVW R16,R26
0002a6 e0e0      	LDI  R30,LOW(0)
0002a7 83ec      	STD  Y+4,R30
0002a8 83ed      	STD  Y+4+1,R30
0002a9 83ee      	STD  Y+6,R30
0002aa 83ef      	STD  Y+6+1,R30
0002ab 01de      	MOVW R26,R28
0002ac 9618      	ADIW R26,8
                +
0002ad 2400     +CLR R0
0002ae 0daf     +ADD R26 , R15
0002af 1db0     +ADC R27 , R0
                 	__ADDW2R15
0002b0 91ed      	LD   R30,X+
0002b1 91fd      	LD   R31,X+
0002b2 93fa      	ST   -Y,R31
0002b3 93ea      	ST   -Y,R30
0002b4 931a      	ST   -Y,R17
0002b5 930a      	ST   -Y,R16
0002b6 e8ed      	LDI  R30,LOW(_put_lcd_G101)
0002b7 e0f2      	LDI  R31,HIGH(_put_lcd_G101)
0002b8 93fa      	ST   -Y,R31
0002b9 93ea      	ST   -Y,R30
0002ba 01de      	MOVW R26,R28
0002bb 9618      	ADIW R26,8
0002bc dea8      	RCALL __print_G101
0002bd 8119      	LDD  R17,Y+1
0002be 8108      	LDD  R16,Y+0
0002bf 9628      	ADIW R28,8
0002c0 90ff      	POP  R15
0002c1 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0002c2 93ba      	ST   -Y,R27
0002c3 93aa      	ST   -Y,R26
0002c4 91a9          ld   r26,y+
0002c5 91b9          ld   r27,y+
0002c6 27ee          clr  r30
0002c7 27ff          clr  r31
                 strlen0:
0002c8 916d          ld   r22,x+
0002c9 2366          tst  r22
0002ca f011          breq strlen1
0002cb 9631          adiw r30,1
0002cc cffb          rjmp strlen0
                 strlen1:
0002cd 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0002ce 93ba      	ST   -Y,R27
0002cf 93aa      	ST   -Y,R26
0002d0 27aa          clr  r26
0002d1 27bb          clr  r27
0002d2 91e9          ld   r30,y+
0002d3 91f9          ld   r31,y+
                 strlenf0:
0002d4 9005      	lpm  r0,z+
0002d5 2000          tst  r0
0002d6 f011          breq strlenf1
0002d7 9611          adiw r26,1
0002d8 cffb          rjmp strlenf0
                 strlenf1:
0002d9 01fd          movw r30,r26
0002da 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G100:
000160           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0002db de22      	RCALL __lcd_write_data
0002dc e0a3      	LDI  R26,LOW(3)
0002dd e0b0      	LDI  R27,0
0002de c03f      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x1:
0002df e3a0      	LDI  R26,LOW(48)
0002e0 de08      	RCALL __lcd_write_nibble_G100
                +
0002e1 ec88     +LDI R24 , LOW ( 200 )
0002e2 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0002e3 9701     +SBIW R24 , 1
0002e4 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0002e5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x2:
0002e6 932a      	ST   -Y,R18
0002e7 85ad      	LDD  R26,Y+13
0002e8 85be      	LDD  R27,Y+13+1
0002e9 85ef      	LDD  R30,Y+15
0002ea 89f8      	LDD  R31,Y+15+1
0002eb 9509      	ICALL
0002ec 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x3:
0002ed 89e8      	LDD  R30,Y+16
0002ee 89f9      	LDD  R31,Y+16+1
0002ef 9734      	SBIW R30,4
0002f0 8be8      	STD  Y+16,R30
0002f1 8bf9      	STD  Y+16+1,R31
0002f2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x4:
0002f3 85ad      	LDD  R26,Y+13
0002f4 85be      	LDD  R27,Y+13+1
0002f5 85ef      	LDD  R30,Y+15
0002f6 89f8      	LDD  R31,Y+15+1
0002f7 9509      	ICALL
0002f8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x5:
0002f9 89a8      	LDD  R26,Y+16
0002fa 89b9      	LDD  R27,Y+16+1
0002fb 9614      	ADIW R26,4
0002fc 91ed      	LD   R30,X+
0002fd 91fd      	LD   R31,X+
0002fe 83ee      	STD  Y+6,R30
0002ff 83ff      	STD  Y+6+1,R31
000300 81ae      	LDD  R26,Y+6
000301 81bf      	LDD  R27,Y+6+1
000302 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000303 935a      	ST   -Y,R21
                 __SAVELOCR5:
000304 934a      	ST   -Y,R20
                 __SAVELOCR4:
000305 933a      	ST   -Y,R19
                 __SAVELOCR3:
000306 932a      	ST   -Y,R18
                 __SAVELOCR2:
000307 931a      	ST   -Y,R17
000308 930a      	ST   -Y,R16
000309 9508      	RET
                 
                 __LOADLOCR6:
00030a 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00030b 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00030c 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00030d 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00030e 8119      	LDD  R17,Y+1
00030f 8108      	LD   R16,Y
000310 9508      	RET
                 
                 __ANEGW1:
000311 95f1      	NEG  R31
000312 95e1      	NEG  R30
000313 40f0      	SBCI R31,0
000314 9508      	RET
                 
                 __GETW1PF:
000315 9005      	LPM  R0,Z+
000316 91f4      	LPM  R31,Z
000317 2de0      	MOV  R30,R0
000318 9508      	RET
                 
                 __PUTPARD1:
000319 937a      	ST   -Y,R23
00031a 936a      	ST   -Y,R22
00031b 93fa      	ST   -Y,R31
00031c 93ea      	ST   -Y,R30
00031d 9508      	RET
                 
                 _delay_ms:
00031e 9610      	adiw r26,0
00031f f039      	breq __delay_ms1
                 __delay_ms0:
000320 95a8      	wdr
                +
000321 ed80     +LDI R24 , LOW ( 0x7D0 )
000322 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000323 9701     +SBIW R24 , 1
000324 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000325 9711      	sbiw r26,1
000326 f7c9      	brne __delay_ms0
                 __delay_ms1:
000327 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  13 r1 :   1 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   5 
r16:  41 r17:  42 r18:  27 r19:  12 r20:   9 r21:  17 r22:   6 r23:   2 
r24:  23 r25:   5 r26:  76 r27:  27 r28:  12 r29:   1 r30: 159 r31:  54 
x  :  21 y  : 135 z  :  14 
Registers used: 25 out of 35 (71.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   4 
adiw  :  18 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  15 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   7 
brlt  :   0 brmi  :   0 brne  :  41 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :   8 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  11 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   5 cpc   :   2 cpi   :  43 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   5 inc   :   2 jmp   :  22 ld    :  24 ldd   :  59 ldi   :  93 
lds   :   0 lpm   :  14 lsl   :   0 lsr   :   0 mov   :  31 movw  :  10 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   7 out   :  10 pop   :   1 push  :   1 rcall :  51 ret   :  33 
reti  :   0 rjmp  :  77 rol   :   0 ror   :   0 sbc   :   1 sbci  :   3 
sbi   :  11 sbic  :   0 sbis  :  12 sbiw  :  14 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  45 std   :  30 sts   :   2 sub   :   1 subi  :  17 swap  :   1 
tst   :   3 wdr   :   1 
Instructions used: 51 out of 116 (44.0%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000650   1584     32   1616   16384   9.9%
[.dseg] 0x000060 0x000164      0      4      4    1024   0.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 4 warnings
